import os, polars as pl
from datetime import datetime, timezone
from prefect import flow, task

COMP_FP = "data/composite/composite.parquet"
PIL_FP  = "data/pillars/pillars.parquet"
IND_SNAP = "data/artifacts/explain_indicator_snapshot.parquet"
REC_FP = "data/regimes/recession_probit.parquet"
HMM_BUS = "data/regimes/business.parquet"
HMM_LIQ = "data/regimes/liquidity.parquet"
HMM_INF = "data/regimes/inflation.parquet"
BREAKS  = "data/regimes/breaks.parquet"
NOTE_MD = "data/artifacts/monthly_note.md"


@task
def _fmt_pct(x, digits=0):
    return f"{round(x*100, digits)}%"


@task
def assemble_markdown():
    # timezone-aware UTC date string
    today = datetime.now(timezone.utc).strftime("%Y-%m-%d")

    def _safe_float(x, default=None):
        try:
            if x is None:
                return default
            v = float(x)
            # NaN check: v != v is True for NaN
            return v if v == v else default
        except Exception:
            return default

    # composite (null-safe)
    comp = pl.read_parquet(COMP_FP).sort("date")
    if comp.height:
        last = comp.tail(1)
        z_val = last["z"][0] if "z" in comp.columns else None
        cz = _safe_float(z_val, 0.0) or 0.0
        r_val = last["regime"][0] if "regime" in comp.columns else None
        creg = (r_val or "N/A")
    else:
        cz, creg = 0.0, "N/A"

    # HMM labels
    def last_label(fp):
        if not os.path.exists(fp):
            return "N/A"
        df = pl.read_parquet(fp)
        if not df.height:
            return "N/A"
        val = df.tail(1)["label"][0]
        return val or "N/A"

    biz = last_label(HMM_BUS)
    liq = last_label(HMM_LIQ)
    inf = last_label(HMM_INF)

    # recession prob
    if os.path.exists(REC_FP):
        rec = pl.read_parquet(REC_FP).sort("date")
        p12 = _safe_float(rec.tail(1)["p_rec_12m"][0] if rec.height else None, None)
        rec_line = (
            f"Recession probability (12m ahead): **{round(p12*100,1)}%**"
            if p12 is not None
            else "Recession probability unavailable."
        )
    else:
        rec_line = "Recession probability unavailable."

    # top movers/indicators
    if os.path.exists(IND_SNAP):
        snap = pl.read_parquet(IND_SNAP).sort(pl.col("composite_contrib_est").abs(), descending=True).head(8)
        lines = []
        for r in snap.to_dicts():
            iz = _safe_float(r.get("indicator_z"), 0.0) or 0.0
            cc = _safe_float(r.get("composite_contrib_est"), 0.0) or 0.0
            label = r.get("label") or r.get("series_id") or "(unknown)"
            pillar = r.get("pillar") or "n/a"
            lines.append(f"- {label} ({pillar}): z={round(iz,2)}; est. composite contrib={round(cc,3)}")
        movers = "\n".join(lines)
    else:
        movers = "- (no indicators yet)"

    # breaks
    breaks = ""
    if os.path.exists(BREAKS):
        brk = pl.read_parquet(BREAKS).sort("date").tail(6)
        if brk.height:
            entries = []
            for r in brk.to_dicts():
                track = r.get("track") or "unknown"
                d = r.get("date")
                dstr = str(d) if d is not None else "unknown date"
                entries.append(f"- {track} break flagged near {dstr}")
            breaks = "\n".join(entries)
        else:
            breaks = "- none detected"
    else:
        breaks = "- none detected"

    md = f"""# Monthly Macro Note
_Date: {today}_

## Executive Summary
- Composite z-score: **{round(cz,2)}**  |  Composite regime: **{creg}**
- Business (HMM): **{biz}** | Liquidity (HMM): **{liq}** | Inflation (HMM): **{inf}**
- {rec_line}

## What Changed
Top indicator contributions (estimated weight Ã— indicator z within pillar):
{movers}

## Structural Breaks (recent)
{breaks}

## Context & Readings
- Drivers page shows heatmaps and pillar trends.
- Turning Points page shows regime probabilities and recession risk.

---
*Generated by Macro Cycles local engine.*
"""
    os.makedirs(os.path.dirname(NOTE_MD), exist_ok=True)
    with open(NOTE_MD, "w") as f:
        f.write(md)
    return NOTE_MD


@flow(name="monthly_note")
def run():
    return assemble_markdown()


if __name__ == "__main__":
    run()
